-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toThreshold_Loop_LineBufferLoop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    absvalueMat_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    absvalueMat_data_stream_0_V_empty_n : IN STD_LOGIC;
    absvalueMat_data_stream_0_V_read : OUT STD_LOGIC;
    angleMat_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    angleMat_data_stream_0_V_empty_n : IN STD_LOGIC;
    angleMat_data_stream_0_V_read : OUT STD_LOGIC;
    nmsupressionMat_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    nmsupressionMat_data_stream_0_V_full_n : IN STD_LOGIC;
    nmsupressionMat_data_stream_0_V_write : OUT STD_LOGIC );
end;


architecture behav of toThreshold_Loop_LineBufferLoop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_F00 : STD_LOGIC_VECTOR (12 downto 0) := "0111100000000";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal tmp_fu_239_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_bdd_55 : BOOLEAN;
    signal tmp_16_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_249_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_253_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_fu_264_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_reg_711 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal tmp_27_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal filterMask_0_0_1_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal col_fu_289_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_reg_735 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuffer_val_0_addr_reg_745 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal tmp_36_trn1_cast1_fu_319_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_trn1_cast1_reg_754 : STD_LOGIC_VECTOR (11 downto 0);
    signal lineBuffer_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer_val_0_addr_1_reg_769 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal filterMask_1_1_1_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_1_1_1_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal ap_sig_bdd_161 : BOOLEAN;
    signal filterMask_0_1_2_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_0_1_2_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_2_1_1_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_2_1_1_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_177 : BOOLEAN;
    signal or_cond_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_410_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal lineBuffer_val_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal lineBuffer_val_0_ce0 : STD_LOGIC;
    signal lineBuffer_val_0_we0 : STD_LOGIC;
    signal lineBuffer_val_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer_val_0_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lineBuffer_val_0_ce1 : STD_LOGIC;
    signal lineBuffer_val_0_we1 : STD_LOGIC;
    signal lineBuffer_val_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuffer_val_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal row5_reg_188 : STD_LOGIC_VECTOR (10 downto 0);
    signal col6_reg_199 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal gep79_loc_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal gep77_loc_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle_value_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal angle_value_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_2_1_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_2_0_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_0_0_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_0_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_1_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal filterMask_1_0_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_trn1_cast_fu_300_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_addr3_fu_304_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_addr6_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt2_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt3_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_demorgan_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_demorgan_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v0_assign_1_s_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal v0_assign_2_s_fu_579_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp2_fu_591_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal v0_assign_3_s_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp7_fu_598_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_v0_assign_fu_567_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp8_fu_605_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_115 : BOOLEAN;

    component toThreshold_Loop_LineBufferLoop_proc_lineBuffer_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lineBuffer_val_0_U : component toThreshold_Loop_LineBufferLoop_proc_lineBuffer_val_0
    generic map (
        DataWidth => 8,
        AddressRange => 5760,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lineBuffer_val_0_address0,
        ce0 => lineBuffer_val_0_ce0,
        we0 => lineBuffer_val_0_we0,
        d0 => lineBuffer_val_0_d0,
        q0 => lineBuffer_val_0_q0,
        address1 => lineBuffer_val_0_address1,
        ce1 => lineBuffer_val_0_ce1,
        we1 => lineBuffer_val_0_we1,
        d1 => lineBuffer_val_0_d1,
        q1 => lineBuffer_val_0_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_259_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- col6_reg_199 assign process. --
    col6_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not(ap_sig_bdd_227))) then 
                col6_reg_199 <= col_reg_735;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_259_p2 = ap_const_lv1_0))) then 
                col6_reg_199 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- gep77_loc_reg_222 assign process. --
    gep77_loc_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                if ((ap_const_lv1_0 = tmp_32_reg_740)) then 
                    gep77_loc_reg_222 <= lineBuffer_val_0_q0;
                elsif (not((ap_const_lv1_0 = tmp_32_reg_740))) then 
                    gep77_loc_reg_222 <= gep79_loc_reg_211;
                end if;
            end if; 
        end if;
    end process;

    -- gep79_loc_reg_211 assign process. --
    gep79_loc_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_115) then
                if ((ap_const_lv1_0 = tmp_33_fu_315_p2)) then 
                    gep79_loc_reg_211 <= lineBuffer_val_0_q0;
                elsif (not((ap_const_lv1_0 = tmp_33_fu_315_p2))) then 
                    gep79_loc_reg_211 <= absvalueMat_data_stream_0_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- row5_reg_188 assign process. --
    row5_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_284_p2)))) then 
                row5_reg_188 <= row_reg_711;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_55))) then 
                row5_reg_188 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_33_reg_750)) and not(ap_sig_bdd_161))) then
                angle_value_1_fu_88(0) <= angle_value_fu_355_p1(0);
    angle_value_1_fu_88(1) <= angle_value_fu_355_p1(1);
    angle_value_1_fu_88(2) <= angle_value_fu_355_p1(2);
    angle_value_1_fu_88(3) <= angle_value_fu_355_p1(3);
    angle_value_1_fu_88(4) <= angle_value_fu_355_p1(4);
    angle_value_1_fu_88(5) <= angle_value_fu_355_p1(5);
    angle_value_1_fu_88(6) <= angle_value_fu_355_p1(6);
    angle_value_1_fu_88(7) <= angle_value_fu_355_p1(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                col_reg_735 <= col_fu_289_p2;
                filterMask_0_0_1_reg_726(0) <= filterMask_0_1_fu_104(0);
    filterMask_0_0_1_reg_726(1) <= filterMask_0_1_fu_104(1);
    filterMask_0_0_1_reg_726(2) <= filterMask_0_1_fu_104(2);
    filterMask_0_0_1_reg_726(3) <= filterMask_0_1_fu_104(3);
    filterMask_0_0_1_reg_726(4) <= filterMask_0_1_fu_104(4);
    filterMask_0_0_1_reg_726(5) <= filterMask_0_1_fu_104(5);
    filterMask_0_0_1_reg_726(6) <= filterMask_0_1_fu_104(6);
    filterMask_0_0_1_reg_726(7) <= filterMask_0_1_fu_104(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not(ap_sig_bdd_227))) then
                filterMask_0_0_fu_100(0) <= filterMask_0_0_1_reg_726(0);
    filterMask_0_0_fu_100(1) <= filterMask_0_0_1_reg_726(1);
    filterMask_0_0_fu_100(2) <= filterMask_0_0_1_reg_726(2);
    filterMask_0_0_fu_100(3) <= filterMask_0_0_1_reg_726(3);
    filterMask_0_0_fu_100(4) <= filterMask_0_0_1_reg_726(4);
    filterMask_0_0_fu_100(5) <= filterMask_0_0_1_reg_726(5);
    filterMask_0_0_fu_100(6) <= filterMask_0_0_1_reg_726(6);
    filterMask_0_0_fu_100(7) <= filterMask_0_0_1_reg_726(7);
                filterMask_0_1_fu_104(0) <= filterMask_0_1_2_reg_791(0);
    filterMask_0_1_fu_104(1) <= filterMask_0_1_2_reg_791(1);
    filterMask_0_1_fu_104(2) <= filterMask_0_1_2_reg_791(2);
    filterMask_0_1_fu_104(3) <= filterMask_0_1_2_reg_791(3);
    filterMask_0_1_fu_104(4) <= filterMask_0_1_2_reg_791(4);
    filterMask_0_1_fu_104(5) <= filterMask_0_1_2_reg_791(5);
    filterMask_0_1_fu_104(6) <= filterMask_0_1_2_reg_791(6);
    filterMask_0_1_fu_104(7) <= filterMask_0_1_2_reg_791(7);
                filterMask_1_0_fu_112(0) <= filterMask_1_1_fu_108(0);
    filterMask_1_0_fu_112(1) <= filterMask_1_1_fu_108(1);
    filterMask_1_0_fu_112(2) <= filterMask_1_1_fu_108(2);
    filterMask_1_0_fu_112(3) <= filterMask_1_1_fu_108(3);
    filterMask_1_0_fu_112(4) <= filterMask_1_1_fu_108(4);
    filterMask_1_0_fu_112(5) <= filterMask_1_1_fu_108(5);
    filterMask_1_0_fu_112(6) <= filterMask_1_1_fu_108(6);
    filterMask_1_0_fu_112(7) <= filterMask_1_1_fu_108(7);
                filterMask_1_1_fu_108(0) <= filterMask_1_1_1_reg_785(0);
    filterMask_1_1_fu_108(1) <= filterMask_1_1_1_reg_785(1);
    filterMask_1_1_fu_108(2) <= filterMask_1_1_1_reg_785(2);
    filterMask_1_1_fu_108(3) <= filterMask_1_1_1_reg_785(3);
    filterMask_1_1_fu_108(4) <= filterMask_1_1_1_reg_785(4);
    filterMask_1_1_fu_108(5) <= filterMask_1_1_1_reg_785(5);
    filterMask_1_1_fu_108(6) <= filterMask_1_1_1_reg_785(6);
    filterMask_1_1_fu_108(7) <= filterMask_1_1_1_reg_785(7);
                filterMask_2_0_fu_96(0) <= filterMask_2_1_fu_92(0);
    filterMask_2_0_fu_96(1) <= filterMask_2_1_fu_92(1);
    filterMask_2_0_fu_96(2) <= filterMask_2_1_fu_92(2);
    filterMask_2_0_fu_96(3) <= filterMask_2_1_fu_92(3);
    filterMask_2_0_fu_96(4) <= filterMask_2_1_fu_92(4);
    filterMask_2_0_fu_96(5) <= filterMask_2_1_fu_92(5);
    filterMask_2_0_fu_96(6) <= filterMask_2_1_fu_92(6);
    filterMask_2_0_fu_96(7) <= filterMask_2_1_fu_92(7);
                filterMask_2_1_fu_92(0) <= filterMask_2_1_1_reg_797(0);
    filterMask_2_1_fu_92(1) <= filterMask_2_1_1_reg_797(1);
    filterMask_2_1_fu_92(2) <= filterMask_2_1_1_reg_797(2);
    filterMask_2_1_fu_92(3) <= filterMask_2_1_1_reg_797(3);
    filterMask_2_1_fu_92(4) <= filterMask_2_1_1_reg_797(4);
    filterMask_2_1_fu_92(5) <= filterMask_2_1_1_reg_797(5);
    filterMask_2_1_fu_92(6) <= filterMask_2_1_1_reg_797(6);
    filterMask_2_1_fu_92(7) <= filterMask_2_1_1_reg_797(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not(ap_sig_bdd_161))) then
                filterMask_0_1_2_reg_791(0) <= filterMask_0_1_2_fu_347_p1(0);
    filterMask_0_1_2_reg_791(1) <= filterMask_0_1_2_fu_347_p1(1);
    filterMask_0_1_2_reg_791(2) <= filterMask_0_1_2_fu_347_p1(2);
    filterMask_0_1_2_reg_791(3) <= filterMask_0_1_2_fu_347_p1(3);
    filterMask_0_1_2_reg_791(4) <= filterMask_0_1_2_fu_347_p1(4);
    filterMask_0_1_2_reg_791(5) <= filterMask_0_1_2_fu_347_p1(5);
    filterMask_0_1_2_reg_791(6) <= filterMask_0_1_2_fu_347_p1(6);
    filterMask_0_1_2_reg_791(7) <= filterMask_0_1_2_fu_347_p1(7);
                filterMask_1_1_1_reg_785(0) <= filterMask_1_1_1_fu_343_p1(0);
    filterMask_1_1_1_reg_785(1) <= filterMask_1_1_1_fu_343_p1(1);
    filterMask_1_1_1_reg_785(2) <= filterMask_1_1_1_fu_343_p1(2);
    filterMask_1_1_1_reg_785(3) <= filterMask_1_1_1_fu_343_p1(3);
    filterMask_1_1_1_reg_785(4) <= filterMask_1_1_1_fu_343_p1(4);
    filterMask_1_1_1_reg_785(5) <= filterMask_1_1_1_fu_343_p1(5);
    filterMask_1_1_1_reg_785(6) <= filterMask_1_1_1_fu_343_p1(6);
    filterMask_1_1_1_reg_785(7) <= filterMask_1_1_1_fu_343_p1(7);
                filterMask_2_1_1_reg_797(0) <= filterMask_2_1_1_fu_351_p1(0);
    filterMask_2_1_1_reg_797(1) <= filterMask_2_1_1_fu_351_p1(1);
    filterMask_2_1_1_reg_797(2) <= filterMask_2_1_1_fu_351_p1(2);
    filterMask_2_1_1_reg_797(3) <= filterMask_2_1_1_fu_351_p1(3);
    filterMask_2_1_1_reg_797(4) <= filterMask_2_1_1_fu_351_p1(4);
    filterMask_2_1_1_reg_797(5) <= filterMask_2_1_1_fu_351_p1(5);
    filterMask_2_1_1_reg_797(6) <= filterMask_2_1_1_fu_351_p1(6);
    filterMask_2_1_1_reg_797(7) <= filterMask_2_1_1_fu_351_p1(7);
                tmp_52_reg_803 <= tmp_52_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                lineBuffer_val_0_addr_1_reg_769(0) <= tmp_36_fu_328_p1(13 - 1 downto 0)(0);
    lineBuffer_val_0_addr_1_reg_769(1) <= tmp_36_fu_328_p1(13 - 1 downto 0)(1);
    lineBuffer_val_0_addr_1_reg_769(2) <= tmp_36_fu_328_p1(13 - 1 downto 0)(2);
    lineBuffer_val_0_addr_1_reg_769(3) <= tmp_36_fu_328_p1(13 - 1 downto 0)(3);
    lineBuffer_val_0_addr_1_reg_769(4) <= tmp_36_fu_328_p1(13 - 1 downto 0)(4);
    lineBuffer_val_0_addr_1_reg_769(5) <= tmp_36_fu_328_p1(13 - 1 downto 0)(5);
    lineBuffer_val_0_addr_1_reg_769(6) <= tmp_36_fu_328_p1(13 - 1 downto 0)(6);
    lineBuffer_val_0_addr_1_reg_769(7) <= tmp_36_fu_328_p1(13 - 1 downto 0)(7);
    lineBuffer_val_0_addr_1_reg_769(8) <= tmp_36_fu_328_p1(13 - 1 downto 0)(8);
    lineBuffer_val_0_addr_1_reg_769(9) <= tmp_36_fu_328_p1(13 - 1 downto 0)(9);
    lineBuffer_val_0_addr_1_reg_769(10) <= tmp_36_fu_328_p1(13 - 1 downto 0)(10);
    lineBuffer_val_0_addr_1_reg_769(11) <= tmp_36_fu_328_p1(13 - 1 downto 0)(11);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_284_p2))) then
                lineBuffer_val_0_addr_reg_745 <= tmp_34_fu_310_p1(13 - 1 downto 0);
                tmp_32_reg_740 <= tmp_32_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                or_cond_reg_812 <= or_cond_fu_404_p2;
                sel_tmp1_reg_840 <= sel_tmp1_fu_525_p2;
                sel_tmp4_reg_850 <= sel_tmp4_fu_561_p2;
                sel_tmp6_reg_845 <= sel_tmp6_fu_543_p2;
                tmp_38_reg_807 <= tmp_38_fu_387_p2;
                tmp_44_reg_825 <= tmp_44_fu_443_p2;
                tmp_47_reg_817 <= tmp_47_fu_410_p1;
                tmp_48_reg_830 <= tmp_48_fu_478_p2;
                tmp_50_reg_835 <= tmp_50_fu_513_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_reg_711 <= row_fu_264_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_259_p2 = ap_const_lv1_0))) then
                tmp_27_reg_716 <= tmp_27_fu_270_p2;
                tmp_28_reg_721 <= tmp_28_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_112))) then
                tmp_33_reg_750 <= tmp_33_fu_315_p2;
                tmp_36_trn1_cast1_reg_754(0) <= tmp_36_trn1_cast1_fu_319_p1(0);
    tmp_36_trn1_cast1_reg_754(1) <= tmp_36_trn1_cast1_fu_319_p1(1);
    tmp_36_trn1_cast1_reg_754(2) <= tmp_36_trn1_cast1_fu_319_p1(2);
    tmp_36_trn1_cast1_reg_754(3) <= tmp_36_trn1_cast1_fu_319_p1(3);
    tmp_36_trn1_cast1_reg_754(4) <= tmp_36_trn1_cast1_fu_319_p1(4);
    tmp_36_trn1_cast1_reg_754(5) <= tmp_36_trn1_cast1_fu_319_p1(5);
    tmp_36_trn1_cast1_reg_754(6) <= tmp_36_trn1_cast1_fu_319_p1(6);
    tmp_36_trn1_cast1_reg_754(7) <= tmp_36_trn1_cast1_fu_319_p1(7);
    tmp_36_trn1_cast1_reg_754(8) <= tmp_36_trn1_cast1_fu_319_p1(8);
    tmp_36_trn1_cast1_reg_754(9) <= tmp_36_trn1_cast1_fu_319_p1(9);
    tmp_36_trn1_cast1_reg_754(10) <= tmp_36_trn1_cast1_fu_319_p1(10);
            end if;
        end if;
    end process;
    filterMask_0_0_1_reg_726(31 downto 8) <= "000000000000000000000000";
    tmp_36_trn1_cast1_reg_754(11) <= '0';
    lineBuffer_val_0_addr_1_reg_769(12) <= '0';
    filterMask_1_1_1_reg_785(31 downto 8) <= "000000000000000000000000";
    filterMask_0_1_2_reg_791(31 downto 8) <= "000000000000000000000000";
    filterMask_2_1_1_reg_797(31 downto 8) <= "000000000000000000000000";
    angle_value_1_fu_88(31 downto 8) <= "000000000000000000000000";
    filterMask_2_1_fu_92(31 downto 8) <= "000000000000000000000000";
    filterMask_2_0_fu_96(31 downto 8) <= "000000000000000000000000";
    filterMask_0_0_fu_100(31 downto 8) <= "000000000000000000000000";
    filterMask_0_1_fu_104(31 downto 8) <= "000000000000000000000000";
    filterMask_1_1_fu_108(31 downto 8) <= "000000000000000000000000";
    filterMask_1_0_fu_112(31 downto 8) <= "000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_55, exitcond4_fu_259_p2, exitcond3_fu_284_p2, ap_sig_bdd_112, ap_sig_bdd_161, ap_sig_bdd_227)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_55)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_259_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_284_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not(ap_sig_bdd_112)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not(ap_sig_bdd_161)) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not(ap_sig_bdd_227)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    -- absvalueMat_data_stream_0_V_read assign process. --
    absvalueMat_data_stream_0_V_read_assign_proc : process(tmp_33_fu_315_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_112)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_33_fu_315_p2)) and not(ap_sig_bdd_112))) then 
            absvalueMat_data_stream_0_V_read <= ap_const_logic_1;
        else 
            absvalueMat_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- angleMat_data_stream_0_V_read assign process. --
    angleMat_data_stream_0_V_read_assign_proc : process(tmp_33_reg_750, ap_sig_cseq_ST_st8_fsm_7, ap_sig_bdd_161)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_33_reg_750)) and not(ap_sig_bdd_161))) then 
            angleMat_data_stream_0_V_read <= ap_const_logic_1;
        else 
            angleMat_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    angle_value_fu_355_p1 <= std_logic_vector(resize(unsigned(angleMat_data_stream_0_V_dout),32));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_259_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_259_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_259_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_259_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(absvalueMat_data_stream_0_V_empty_n, tmp_33_fu_315_p2)
    begin
                ap_sig_bdd_112 <= ((absvalueMat_data_stream_0_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_33_fu_315_p2)));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_112)
    begin
                ap_sig_bdd_115 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_112));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(angleMat_data_stream_0_V_empty_n, tmp_33_reg_750)
    begin
                ap_sig_bdd_161 <= ((angleMat_data_stream_0_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_33_reg_750)));
    end process;


    -- ap_sig_bdd_177 assign process. --
    ap_sig_bdd_177_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_177 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(nmsupressionMat_data_stream_0_V_full_n, tmp_52_reg_803)
    begin
                ap_sig_bdd_227 <= ((nmsupressionMat_data_stream_0_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_52_reg_803)));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_55 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_88 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_88)
    begin
        if (ap_sig_bdd_88) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_177)
    begin
        if (ap_sig_bdd_177) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_289_p2 <= std_logic_vector(unsigned(col6_reg_199) + unsigned(ap_const_lv11_1));
    exitcond3_fu_284_p2 <= "1" when (col6_reg_199 = tmp_16_fu_243_p2) else "0";
    exitcond4_fu_259_p2 <= "1" when (row5_reg_188 = tmp_17_fu_253_p2) else "0";
    filterMask_0_1_2_fu_347_p1 <= std_logic_vector(resize(unsigned(lineBuffer_val_0_q1),32));
    filterMask_1_1_1_fu_343_p1 <= std_logic_vector(resize(unsigned(gep77_loc_reg_222),32));
    filterMask_2_1_1_fu_351_p1 <= std_logic_vector(resize(unsigned(gep79_loc_reg_211),32));

    -- lineBuffer_val_0_address0 assign process. --
    lineBuffer_val_0_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, lineBuffer_val_0_addr_reg_745, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, tmp_34_fu_310_p1, tmp_36_fu_328_p1, tmp_43_fu_333_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            lineBuffer_val_0_address0 <= tmp_43_fu_333_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lineBuffer_val_0_address0 <= lineBuffer_val_0_addr_reg_745;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            lineBuffer_val_0_address0 <= tmp_36_fu_328_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            lineBuffer_val_0_address0 <= tmp_34_fu_310_p1(13 - 1 downto 0);
        else 
            lineBuffer_val_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- lineBuffer_val_0_address1 assign process. --
    lineBuffer_val_0_address1_assign_proc : process(lineBuffer_val_0_addr_1_reg_769, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, tmp_46_fu_338_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            lineBuffer_val_0_address1 <= lineBuffer_val_0_addr_1_reg_769;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            lineBuffer_val_0_address1 <= tmp_46_fu_338_p1(13 - 1 downto 0);
        else 
            lineBuffer_val_0_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- lineBuffer_val_0_ce0 assign process. --
    lineBuffer_val_0_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_112, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_112)) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            lineBuffer_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuffer_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuffer_val_0_ce1 assign process. --
    lineBuffer_val_0_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            lineBuffer_val_0_ce1 <= ap_const_logic_1;
        else 
            lineBuffer_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuffer_val_0_d0 assign process. --
    lineBuffer_val_0_d0_assign_proc : process(absvalueMat_data_stream_0_V_dout, ap_sig_cseq_ST_st4_fsm_3, lineBuffer_val_0_q0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            lineBuffer_val_0_d0 <= lineBuffer_val_0_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lineBuffer_val_0_d0 <= absvalueMat_data_stream_0_V_dout;
        else 
            lineBuffer_val_0_d0 <= "XXXXXXXX";
        end if; 
    end process;

    lineBuffer_val_0_d1 <= gep79_loc_reg_211;

    -- lineBuffer_val_0_we0 assign process. --
    lineBuffer_val_0_we0_assign_proc : process(tmp_32_reg_740, tmp_33_fu_315_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_bdd_112, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_33_fu_315_p2)) and not(ap_sig_bdd_112)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_32_reg_740))))) then 
            lineBuffer_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuffer_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lineBuffer_val_0_we1 assign process. --
    lineBuffer_val_0_we1_assign_proc : process(tmp_32_reg_740, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_32_reg_740))))) then 
            lineBuffer_val_0_we1 <= ap_const_logic_1;
        else 
            lineBuffer_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    nmsupressionMat_data_stream_0_V_din <= 
        p_v0_assign_fu_567_p3 when (tmp_38_reg_807(0) = '1') else 
        sel_tmp8_fu_605_p3;

    -- nmsupressionMat_data_stream_0_V_write assign process. --
    nmsupressionMat_data_stream_0_V_write_assign_proc : process(tmp_52_reg_803, ap_sig_cseq_ST_st10_fsm_9, ap_sig_bdd_227)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_52_reg_803)) and not(ap_sig_bdd_227))) then 
            nmsupressionMat_data_stream_0_V_write <= ap_const_logic_1;
        else 
            nmsupressionMat_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_404_p2 <= (tmp_39_fu_393_p2 or tmp_40_fu_398_p2);
    p_addr3_fu_304_p2 <= std_logic_vector(unsigned(tmp_36_trn1_cast_fu_300_p1) + unsigned(ap_const_lv13_F00));
    p_addr6_fu_323_p2 <= std_logic_vector(unsigned(tmp_36_trn1_cast1_reg_754) + unsigned(ap_const_lv12_780));
    p_v0_assign_fu_567_p3 <= 
        ap_const_lv8_0 when (or_cond_reg_812(0) = '1') else 
        tmp_47_reg_817;
    rev1_fu_437_p2 <= (slt1_fu_431_p2 xor ap_const_lv1_1);
    rev2_fu_460_p2 <= (slt2_fu_455_p2 xor ap_const_lv1_1);
    rev3_fu_472_p2 <= (slt3_fu_466_p2 xor ap_const_lv1_1);
    rev4_fu_495_p2 <= (slt4_fu_490_p2 xor ap_const_lv1_1);
    rev5_fu_507_p2 <= (slt5_fu_501_p2 xor ap_const_lv1_1);
    rev_fu_425_p2 <= (slt_fu_420_p2 xor ap_const_lv1_1);
    row_fu_264_p2 <= std_logic_vector(unsigned(row5_reg_188) + unsigned(ap_const_lv11_1));
    sel_tmp12_demorgan_fu_549_p2 <= (sel_tmp5_demorgan_fu_531_p2 or tmp_45_fu_449_p2);
    sel_tmp1_fu_525_p2 <= (tmp_41_fu_414_p2 and sel_tmp_fu_519_p2);
    sel_tmp2_fu_591_p3 <= 
        v0_assign_1_s_fu_573_p3 when (sel_tmp1_reg_840(0) = '1') else 
        ap_const_lv8_7F;
    sel_tmp3_fu_555_p2 <= (sel_tmp12_demorgan_fu_549_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_561_p2 <= (tmp_49_fu_484_p2 and sel_tmp3_fu_555_p2);
    sel_tmp5_demorgan_fu_531_p2 <= (tmp_38_fu_387_p2 or tmp_41_fu_414_p2);
    sel_tmp5_fu_537_p2 <= (sel_tmp5_demorgan_fu_531_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_543_p2 <= (tmp_45_fu_449_p2 and sel_tmp5_fu_537_p2);
    sel_tmp7_fu_598_p3 <= 
        v0_assign_2_s_fu_579_p3 when (sel_tmp6_reg_845(0) = '1') else 
        sel_tmp2_fu_591_p3;
    sel_tmp8_fu_605_p3 <= 
        v0_assign_3_s_fu_585_p3 when (sel_tmp4_reg_850(0) = '1') else 
        sel_tmp7_fu_598_p3;
    sel_tmp_fu_519_p2 <= (tmp_38_fu_387_p2 xor ap_const_lv1_1);
    slt1_fu_431_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_0_0_fu_100)) else "0";
    slt2_fu_455_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_1_1_1_reg_785)) else "0";
    slt3_fu_466_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_1_0_fu_112)) else "0";
    slt4_fu_490_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_0_1_2_reg_791)) else "0";
    slt5_fu_501_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_2_0_fu_96)) else "0";
    slt_fu_420_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_2_1_1_reg_797)) else "0";
    tmp_16_fu_243_p2 <= std_logic_vector(unsigned(tmp_fu_239_p1) + unsigned(ap_const_lv11_1));
    tmp_17_fu_253_p2 <= std_logic_vector(unsigned(tmp_42_fu_249_p1) + unsigned(ap_const_lv11_1));
    tmp_27_fu_270_p2 <= "1" when (unsigned(row5_reg_188) < unsigned(tmp_42_fu_249_p1)) else "0";
    tmp_28_fu_275_p2 <= "0" when (row5_reg_188 = ap_const_lv11_0) else "1";
    tmp_32_fu_295_p2 <= "1" when (unsigned(col6_reg_199) < unsigned(tmp_fu_239_p1)) else "0";
    tmp_33_fu_315_p2 <= (tmp_32_reg_740 and tmp_27_reg_716);
    tmp_34_fu_310_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_304_p2),64));
    tmp_36_fu_328_p1 <= std_logic_vector(resize(unsigned(p_addr6_fu_323_p2),64));
    tmp_36_trn1_cast1_fu_319_p1 <= std_logic_vector(resize(unsigned(col6_reg_199),12));
    tmp_36_trn1_cast_fu_300_p1 <= std_logic_vector(resize(unsigned(col6_reg_199),13));
    tmp_38_fu_387_p2 <= "1" when (angle_value_1_fu_88 = ap_const_lv32_0) else "0";
    tmp_39_fu_393_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_0_0_1_reg_726)) else "0";
    tmp_40_fu_398_p2 <= "1" when (signed(filterMask_1_1_fu_108) < signed(filterMask_2_1_fu_92)) else "0";
    tmp_41_fu_414_p2 <= "1" when (angle_value_1_fu_88 = ap_const_lv32_2D) else "0";
    tmp_42_fu_249_p1 <= rows(11 - 1 downto 0);
    tmp_43_fu_333_p1 <= std_logic_vector(resize(unsigned(col6_reg_199),64));
    tmp_44_fu_443_p2 <= (rev_fu_425_p2 and rev1_fu_437_p2);
    tmp_45_fu_449_p2 <= "1" when (angle_value_1_fu_88 = ap_const_lv32_5A) else "0";
    tmp_46_fu_338_p1 <= std_logic_vector(resize(unsigned(col6_reg_199),64));
    tmp_47_fu_410_p1 <= filterMask_1_1_fu_108(8 - 1 downto 0);
    tmp_48_fu_478_p2 <= (rev2_fu_460_p2 and rev3_fu_472_p2);
    tmp_49_fu_484_p2 <= "1" when (angle_value_1_fu_88 = ap_const_lv32_87) else "0";
    tmp_50_fu_513_p2 <= (rev4_fu_495_p2 and rev5_fu_507_p2);
    tmp_51_fu_364_p2 <= "0" when (col6_reg_199 = ap_const_lv11_0) else "1";
    tmp_52_fu_370_p2 <= (tmp_51_fu_364_p2 and tmp_28_reg_721);
    tmp_fu_239_p1 <= cols(11 - 1 downto 0);
    v0_assign_1_s_fu_573_p3 <= 
        tmp_47_reg_817 when (tmp_44_reg_825(0) = '1') else 
        ap_const_lv8_0;
    v0_assign_2_s_fu_579_p3 <= 
        tmp_47_reg_817 when (tmp_48_reg_830(0) = '1') else 
        ap_const_lv8_0;
    v0_assign_3_s_fu_585_p3 <= 
        tmp_47_reg_817 when (tmp_50_reg_835(0) = '1') else 
        ap_const_lv8_0;
end behav;
