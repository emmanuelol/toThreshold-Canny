

================================================================
== Vivado HLS Report for 'toThreshold_Loop_GradientLoop_proc'
================================================================
* Date:           Fri Jun 26 18:10:46 2015

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        threshold_IP
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.62|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+---------+-----+---------+---------+
    |    Latency    |    Interval   | Pipeline|
    | min |   max   | min |   max   |   Type  |
    +-----+---------+-----+---------+---------+
    |   60|  2136241|   60|  2136241|   none  |
    +-----+---------+-----+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+-----+---------+-----------+-----------+-----------+----------+----------+
        |                   |    Latency    | Iteration |  Initiation Interval  |   Trip   |          |
        |     Loop Name     | min |   max   |  Latency  |  achieved |   target  |   Count  | Pipelined|
        +-------------------+-----+---------+-----------+-----------+-----------+----------+----------+
        |- GradientLoop     |   59|  2136240| 59 ~ 1978 |          -|          -| 1 ~ 1080 |    no    |
        | + GradientLoop.1  |   56|     1975|         57|          1|          1| 1 ~ 1920 |    yes   |
        +-------------------+-----+---------+-----------+-----------+-----------+----------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 2
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 57


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 60
* Pipeline: 1
  Pipeline-0: II = 1, D = 57, States = { 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond6)
3 --> 
	60  / (exitcond5)
	4  / (!exitcond5)
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	3  / true
60 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_61 [1/1] 0.00ns
newFuncRoot:0  call void (...)* @_ssdm_op_SpecIFCore(i32 %rows, [1 x i8]* @p_str1806, [10 x i8]* @p_str1807, [1 x i8]* @p_str1806, i32 -1, [1 x i8]* @p_str1806, [1 x i8]* @p_str1806, [20 x i8]* @p_str1808)

ST_1: stg_62 [1/1] 0.00ns
newFuncRoot:1  call void (...)* @_ssdm_op_SpecIFCore(i32 %cols, [1 x i8]* @p_str1806, [10 x i8]* @p_str1807, [1 x i8]* @p_str1806, i32 -1, [1 x i8]* @p_str1806, [1 x i8]* @p_str1806, [20 x i8]* @p_str1808)

ST_1: stg_63 [1/1] 0.00ns
newFuncRoot:2  call void (...)* @_ssdm_op_SpecInterface(i8* %angleMat_data_stream_0_V, [8 x i8]* @str260, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str261, [1 x i8]* @str261, [8 x i8]* @str260)

ST_1: stg_64 [1/1] 0.00ns
newFuncRoot:3  call void (...)* @_ssdm_op_SpecInterface(i8* %absvalueMat_data_stream_0_V, [8 x i8]* @str256, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str257, [1 x i8]* @str257, [8 x i8]* @str256)

ST_1: stg_65 [1/1] 0.00ns
newFuncRoot:4  call void (...)* @_ssdm_op_SpecInterface(i8* %sobelyMat_data_stream_0_V, [8 x i8]* @str252, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str253, [1 x i8]* @str253, [8 x i8]* @str252)

ST_1: stg_66 [1/1] 0.00ns
newFuncRoot:5  call void (...)* @_ssdm_op_SpecInterface(i8* %sobelxMat_data_stream_0_V, [8 x i8]* @str248, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @str249, [1 x i8]* @str249, [8 x i8]* @str248)

ST_1: cols_read [1/1] 0.00ns
newFuncRoot:6  %cols_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %cols)

ST_1: rows_read [1/1] 0.00ns
newFuncRoot:7  %rows_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %rows)

ST_1: tmp [1/1] 0.00ns
newFuncRoot:8  %tmp = trunc i32 %rows_read to i12

ST_1: tmp_1 [1/1] 0.00ns
newFuncRoot:9  %tmp_1 = trunc i32 %cols_read to i12

ST_1: stg_71 [1/1] 1.57ns
newFuncRoot:10  br label %0


 <State 2>: 2.14ns
ST_2: row [1/1] 0.00ns
:0  %row = phi i11 [ 0, %newFuncRoot ], [ %row_1, %1 ]

ST_2: row_cast [1/1] 0.00ns
:1  %row_cast = zext i11 %row to i12

ST_2: exitcond6 [1/1] 2.14ns
:2  %exitcond6 = icmp eq i12 %row_cast, %tmp

ST_2: stg_75 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1080, i64 0)

ST_2: row_1 [1/1] 1.84ns
:4  %row_1 = add i11 %row, 1

ST_2: stg_77 [1/1] 0.00ns
:5  br i1 %exitcond6, label %arrayctor.loop.preheader.exitStub, label %3

ST_2: stg_78 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopName([13 x i8]* @p_str1810) nounwind

ST_2: tmp_4 [1/1] 0.00ns
:1  %tmp_4 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1810)

ST_2: stg_80 [1/1] 1.57ns
:2  br label %2

ST_2: stg_81 [1/1] 0.00ns
arrayctor.loop.preheader.exitStub:0  ret void


 <State 3>: 2.14ns
ST_3: col [1/1] 0.00ns
:0  %col = phi i12 [ 0, %3 ], [ %col_1, %_ifconv ]

ST_3: exitcond5 [1/1] 2.14ns
:1  %exitcond5 = icmp eq i12 %col, %tmp_1

ST_3: col_1 [1/1] 1.84ns
:2  %col_1 = add i12 %col, 1

ST_3: stg_85 [1/1] 0.00ns
:3  br i1 %exitcond5, label %1, label %_ifconv


 <State 4>: 7.98ns
ST_4: tmp_3 [1/1] 0.00ns
_ifconv:3  %tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1826)

ST_4: stg_87 [1/1] 0.00ns
_ifconv:4  call void (...)* @_ssdm_op_SpecProtocol(i32 0, [1 x i8]* @p_str1806) nounwind

ST_4: sobelxMat_data_stream_0_V_rea [1/1] 1.70ns
_ifconv:5  %sobelxMat_data_stream_0_V_rea = call i8 @_ssdm_op_Read.ap_fifo.volatile.i8P(i8* %sobelxMat_data_stream_0_V)

ST_4: empty_39 [1/1] 0.00ns
_ifconv:6  %empty_39 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1826, i32 %tmp_3)

ST_4: tmp_s [1/1] 0.00ns
_ifconv:7  %tmp_s = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1826)

ST_4: stg_91 [1/1] 0.00ns
_ifconv:8  call void (...)* @_ssdm_op_SpecProtocol(i32 0, [1 x i8]* @p_str1806) nounwind

ST_4: sobelyMat_data_stream_0_V_rea [1/1] 1.70ns
_ifconv:9  %sobelyMat_data_stream_0_V_rea = call i8 @_ssdm_op_Read.ap_fifo.volatile.i8P(i8* %sobelyMat_data_stream_0_V)

ST_4: empty_40 [1/1] 0.00ns
_ifconv:10  %empty_40 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1826, i32 %tmp_s)

ST_4: tmp_5 [1/1] 2.00ns
_ifconv:11  %tmp_5 = icmp eq i8 %sobelyMat_data_stream_0_V_rea, 0

ST_4: y [6/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_4: tmp_6 [1/1] 0.00ns
_ifconv:14  %tmp_6 = zext i8 %sobelxMat_data_stream_0_V_rea to i32

ST_4: tmp_7 [6/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 5>: 6.28ns
ST_5: y [5/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_5: tmp_7 [5/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 6>: 6.28ns
ST_6: y [4/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_6: tmp_7 [4/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 7>: 6.28ns
ST_7: y [3/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_7: tmp_7 [3/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 8>: 6.28ns
ST_8: y [2/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_8: tmp_7 [2/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 9>: 7.65ns
ST_9: y [1/6] 6.28ns
_ifconv:12  %y = uitofp i8 %sobelyMat_data_stream_0_V_rea to double

ST_9: y1 [1/1] 1.37ns
_ifconv:13  %y1 = select i1 %tmp_5, double 1.000000e+00, double %y

ST_9: tmp_7 [1/6] 6.28ns
_ifconv:15  %tmp_7 = sitofp i32 %tmp_6 to double


 <State 10>: 8.23ns
ST_10: tmp_8 [5/5] 8.23ns
_ifconv:16  %tmp_8 = fsub double %tmp_7, %y1

ST_10: abs_value [5/5] 8.23ns
_ifconv:17  %abs_value = fadd double %tmp_7, %y1


 <State 11>: 8.23ns
ST_11: tmp_8 [4/5] 8.23ns
_ifconv:16  %tmp_8 = fsub double %tmp_7, %y1

ST_11: abs_value [4/5] 8.23ns
_ifconv:17  %abs_value = fadd double %tmp_7, %y1


 <State 12>: 8.23ns
ST_12: tmp_8 [3/5] 8.23ns
_ifconv:16  %tmp_8 = fsub double %tmp_7, %y1

ST_12: abs_value [3/5] 8.23ns
_ifconv:17  %abs_value = fadd double %tmp_7, %y1


 <State 13>: 8.23ns
ST_13: tmp_8 [2/5] 8.23ns
_ifconv:16  %tmp_8 = fsub double %tmp_7, %y1

ST_13: abs_value [2/5] 8.23ns
_ifconv:17  %abs_value = fadd double %tmp_7, %y1


 <State 14>: 8.23ns
ST_14: tmp_8 [1/5] 8.23ns
_ifconv:16  %tmp_8 = fsub double %tmp_7, %y1

ST_14: abs_value [1/5] 8.23ns
_ifconv:17  %abs_value = fadd double %tmp_7, %y1


 <State 15>: 8.62ns
ST_15: r [31/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value

ST_15: abs_value_to_int [1/1] 0.00ns
_ifconv:19  %abs_value_to_int = bitcast double %abs_value to i64

ST_15: tmp_9 [1/1] 0.00ns
_ifconv:20  %tmp_9 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %abs_value_to_int, i32 52, i32 62)

ST_15: tmp_10 [1/1] 0.00ns
_ifconv:21  %tmp_10 = trunc i64 %abs_value_to_int to i52

ST_15: notlhs [1/1] 2.11ns
_ifconv:22  %notlhs = icmp ne i11 %tmp_9, -1

ST_15: notrhs [1/1] 2.64ns
_ifconv:23  %notrhs = icmp eq i52 %tmp_10, 0

ST_15: tmp_11 [1/1] 1.37ns
_ifconv:24  %tmp_11 = or i1 %notrhs, %notlhs

ST_15: tmp_12 [1/1] 6.83ns
_ifconv:25  %tmp_12 = fcmp ogt double %abs_value, 2.550000e+02

ST_15: tmp_13 [1/1] 1.37ns
_ifconv:26  %tmp_13 = and i1 %tmp_11, %tmp_12


 <State 16>: 8.62ns
ST_16: r [30/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value

ST_16: p_Val2_s [1/1] 1.37ns
_ifconv:52  %p_Val2_s = select i1 %tmp_13, i64 4643176031446892544, i64 %abs_value_to_int

ST_16: loc_V [1/1] 0.00ns
_ifconv:53  %loc_V = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_s, i32 52, i32 62) nounwind

ST_16: loc_V_1 [1/1] 0.00ns
_ifconv:54  %loc_V_1 = trunc i64 %p_Val2_s to i52

ST_16: p_Result_s [1/1] 0.00ns
_ifconv:55  %p_Result_s = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %loc_V_1) nounwind

ST_16: tmp_i_cast_i [1/1] 0.00ns
_ifconv:56  %tmp_i_cast_i = zext i53 %p_Result_s to i60

ST_16: tmp_i_i_cast_i [1/1] 0.00ns
_ifconv:57  %tmp_i_i_cast_i = zext i11 %loc_V to i12

ST_16: sh_assign [1/1] 1.84ns
_ifconv:58  %sh_assign = add i12 %tmp_i_i_cast_i, -1023

ST_16: isNeg [1/1] 0.00ns
_ifconv:59  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %sh_assign, i32 11)

ST_16: tmp_i_i [1/1] 1.84ns
_ifconv:60  %tmp_i_i = sub i11 1023, %loc_V

ST_16: tmp_i_cast_i_41 [1/1] 0.00ns
_ifconv:61  %tmp_i_cast_i_41 = sext i11 %tmp_i_i to i12

ST_16: sh_assign_1 [1/1] 1.37ns
_ifconv:62  %sh_assign_1 = select i1 %isNeg, i12 %tmp_i_cast_i_41, i12 %sh_assign

ST_16: sh_assign_1_i_cast_i [1/1] 0.00ns
_ifconv:63  %sh_assign_1_i_cast_i = sext i12 %sh_assign_1 to i32

ST_16: tmp_85_i_cast_i [1/1] 0.00ns
_ifconv:64  %tmp_85_i_cast_i = zext i32 %sh_assign_1_i_cast_i to i53

ST_16: tmp_86_i_i [1/1] 3.56ns
_ifconv:65  %tmp_86_i_i = lshr i53 %p_Result_s, %tmp_85_i_cast_i

ST_16: tmp_87_i_cast_i [1/1] 0.00ns
_ifconv:66  %tmp_87_i_cast_i = zext i32 %sh_assign_1_i_cast_i to i60

ST_16: tmp_88_i_i [1/1] 3.56ns
_ifconv:67  %tmp_88_i_i = shl i60 %tmp_i_cast_i, %tmp_87_i_cast_i

ST_16: tmp_32 [1/1] 0.00ns
_ifconv:68  %tmp_32 = call i1 @_ssdm_op_BitSelect.i1.i53.i32(i53 %tmp_86_i_i, i32 52)

ST_16: tmp_30 [1/1] 0.00ns
_ifconv:70  %tmp_30 = call i8 @_ssdm_op_PartSelect.i8.i60.i32.i32(i60 %tmp_88_i_i, i32 52, i32 59)


 <State 17>: 8.62ns
ST_17: r [29/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value

ST_17: tmp_28 [1/1] 0.00ns
_ifconv:69  %tmp_28 = zext i1 %tmp_32 to i8

ST_17: result_V [1/1] 1.37ns
_ifconv:71  %result_V = select i1 %isNeg, i8 %tmp_28, i8 %tmp_30


 <State 18>: 8.62ns
ST_18: r [28/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 19>: 8.62ns
ST_19: r [27/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 20>: 8.62ns
ST_20: r [26/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 21>: 8.62ns
ST_21: r [25/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 22>: 8.62ns
ST_22: r [24/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 23>: 8.62ns
ST_23: r [23/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 24>: 8.62ns
ST_24: r [22/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 25>: 8.62ns
ST_25: r [21/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 26>: 8.62ns
ST_26: r [20/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 27>: 8.62ns
ST_27: r [19/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 28>: 8.62ns
ST_28: r [18/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 29>: 8.62ns
ST_29: r [17/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 30>: 8.62ns
ST_30: r [16/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 31>: 8.62ns
ST_31: r [15/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 32>: 8.62ns
ST_32: r [14/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 33>: 8.62ns
ST_33: r [13/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 34>: 8.62ns
ST_34: r [12/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 35>: 8.62ns
ST_35: r [11/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 36>: 8.62ns
ST_36: r [10/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 37>: 8.62ns
ST_37: r [9/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 38>: 8.62ns
ST_38: r [8/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 39>: 8.62ns
ST_39: r [7/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 40>: 8.62ns
ST_40: r [6/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 41>: 8.62ns
ST_41: r [5/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 42>: 8.62ns
ST_42: r [4/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 43>: 8.62ns
ST_43: r [3/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 44>: 8.62ns
ST_44: r [2/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 45>: 8.62ns
ST_45: r [1/31] 8.62ns
_ifconv:18  %r = fdiv double %tmp_8, %abs_value


 <State 46>: 7.79ns
ST_46: tmp_14 [6/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 47>: 7.79ns
ST_47: tmp_14 [5/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 48>: 7.79ns
ST_48: tmp_14 [4/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 49>: 7.79ns
ST_49: tmp_14 [3/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 50>: 7.79ns
ST_50: tmp_14 [2/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 51>: 7.79ns
ST_51: tmp_14 [1/6] 7.79ns
_ifconv:27  %tmp_14 = fmul double %r, 0x3FE921FB540D8D20


 <State 52>: 8.23ns
ST_52: angle [5/5] 8.23ns
_ifconv:28  %angle = fsub double 0x3FE921FB540D8D20, %tmp_14


 <State 53>: 8.23ns
ST_53: angle [4/5] 8.23ns
_ifconv:28  %angle = fsub double 0x3FE921FB540D8D20, %tmp_14


 <State 54>: 8.23ns
ST_54: angle [3/5] 8.23ns
_ifconv:28  %angle = fsub double 0x3FE921FB540D8D20, %tmp_14


 <State 55>: 8.23ns
ST_55: angle [2/5] 8.23ns
_ifconv:28  %angle = fsub double 0x3FE921FB540D8D20, %tmp_14


 <State 56>: 8.23ns
ST_56: angle [1/5] 8.23ns
_ifconv:28  %angle = fsub double 0x3FE921FB540D8D20, %tmp_14


 <State 57>: 8.20ns
ST_57: angle_to_int [1/1] 0.00ns
_ifconv:29  %angle_to_int = bitcast double %angle to i64

ST_57: tmp_15 [1/1] 0.00ns
_ifconv:30  %tmp_15 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %angle_to_int, i32 52, i32 62)

ST_57: tmp_16 [1/1] 0.00ns
_ifconv:31  %tmp_16 = trunc i64 %angle_to_int to i52

ST_57: notlhs1 [1/1] 2.11ns
_ifconv:32  %notlhs1 = icmp ne i11 %tmp_15, -1

ST_57: notrhs1 [1/1] 2.64ns
_ifconv:33  %notrhs1 = icmp eq i52 %tmp_16, 0

ST_57: tmp_17 [1/1] 1.37ns
_ifconv:34  %tmp_17 = or i1 %notrhs1, %notlhs1

ST_57: tmp_18 [1/1] 6.83ns
_ifconv:35  %tmp_18 = fcmp ole double %angle, 0x3FD921FB5496FD7F

ST_57: tmp_19 [1/1] 1.37ns
_ifconv:36  %tmp_19 = and i1 %tmp_17, %tmp_18

ST_57: tmp_20 [1/1] 6.83ns
_ifconv:37  %tmp_20 = fcmp ogt double %angle, 0x4005FDBBE9B14F3A

ST_57: tmp_22 [1/1] 6.83ns
_ifconv:39  %tmp_22 = fcmp ole double %angle, 0x3FF2D97C80841EDE

ST_57: tmp_23 [1/1] 1.37ns
_ifconv:40  %tmp_23 = and i1 %tmp_17, %tmp_22

ST_57: tmp_25 [1/1] 6.83ns
_ifconv:42  %tmp_25 = fcmp ole double %angle, 0x3FFF6A7A29BCBCDF

ST_57: tmp_26 [1/1] 1.37ns
_ifconv:43  %tmp_26 = and i1 %tmp_17, %tmp_25


 <State 58>: 2.74ns
ST_58: tmp_21 [1/1] 1.37ns
_ifconv:38  %tmp_21 = and i1 %tmp_19, %tmp_20

ST_58: tmp9_demorgan [1/1] 1.37ns
_ifconv:44  %tmp9_demorgan = or i1 %tmp_26, %tmp_21


 <State 59>: 8.55ns
ST_59: stg_204 [1/1] 0.00ns
_ifconv:0  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 1920, i64 0)

ST_59: tmp_2 [1/1] 0.00ns
_ifconv:1  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1811)

ST_59: stg_206 [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1806) nounwind

ST_59: tmp_24 [1/1] 1.37ns
_ifconv:41  %tmp_24 = xor i1 %tmp_23, true

ST_59: tmp9 [1/1] 1.37ns
_ifconv:45  %tmp9 = xor i1 %tmp9_demorgan, true

ST_59: sel_tmp2 [1/1] 1.37ns
_ifconv:46  %sel_tmp2 = and i1 %tmp9, %tmp_24

ST_59: sel_tmp3 [1/1] 1.37ns
_ifconv:47  %sel_tmp3 = select i1 %tmp_21, i8 0, i8 -121

ST_59: tmp_27 [1/1] 1.37ns
_ifconv:48  %tmp_27 = or i1 %tmp_21, %sel_tmp2

ST_59: sel_tmp4 [1/1] 1.37ns
_ifconv:49  %sel_tmp4 = select i1 %tmp_27, i8 %sel_tmp3, i8 90

ST_59: sel_tmp7_demorgan [1/1] 1.37ns
_ifconv:50  %sel_tmp7_demorgan = or i1 %tmp_21, %tmp_24

ST_59: result_val_0 [1/1] 1.37ns
_ifconv:51  %result_val_0 = select i1 %sel_tmp7_demorgan, i8 %sel_tmp4, i8 45

ST_59: tmp_29 [1/1] 0.00ns
_ifconv:72  %tmp_29 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1824)

ST_59: stg_216 [1/1] 0.00ns
_ifconv:73  call void (...)* @_ssdm_op_SpecProtocol(i32 0, [1 x i8]* @p_str1806) nounwind

ST_59: stg_217 [1/1] 1.70ns
_ifconv:74  call void @_ssdm_op_Write.ap_fifo.volatile.i8P(i8* %absvalueMat_data_stream_0_V, i8 %result_V)

ST_59: empty_42 [1/1] 0.00ns
_ifconv:75  %empty_42 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1824, i32 %tmp_29)

ST_59: tmp_31 [1/1] 0.00ns
_ifconv:76  %tmp_31 = call i32 (...)* @_ssdm_op_SpecRegionBegin([13 x i8]* @p_str1824)

ST_59: stg_220 [1/1] 0.00ns
_ifconv:77  call void (...)* @_ssdm_op_SpecProtocol(i32 0, [1 x i8]* @p_str1806) nounwind

ST_59: stg_221 [1/1] 1.70ns
_ifconv:78  call void @_ssdm_op_Write.ap_fifo.volatile.i8P(i8* %angleMat_data_stream_0_V, i8 %result_val_0)

ST_59: empty_43 [1/1] 0.00ns
_ifconv:79  %empty_43 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1824, i32 %tmp_31)

ST_59: empty_44 [1/1] 0.00ns
_ifconv:80  %empty_44 = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1811, i32 %tmp_2)

ST_59: stg_224 [1/1] 0.00ns
_ifconv:81  br label %2


 <State 60>: 0.00ns
ST_60: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecRegionEnd([13 x i8]* @p_str1810, i32 %tmp_4)

ST_60: stg_226 [1/1] 0.00ns
:1  br label %0



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
