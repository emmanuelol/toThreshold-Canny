// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _toThreshold_Block_proc_HH_
#define _toThreshold_Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct toThreshold_Block_proc : public sc_module {
    // Port declarations 35
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > rows;
    sc_in< sc_lv<32> > cols;
    sc_out< sc_lv<12> > ap_return_0;
    sc_out< sc_lv<12> > ap_return_1;
    sc_out< sc_lv<12> > ap_return_2;
    sc_out< sc_lv<12> > ap_return_3;
    sc_out< sc_lv<12> > ap_return_4;
    sc_out< sc_lv<12> > ap_return_5;
    sc_out< sc_lv<12> > ap_return_6;
    sc_out< sc_lv<12> > ap_return_7;
    sc_out< sc_lv<12> > ap_return_8;
    sc_out< sc_lv<12> > ap_return_9;
    sc_out< sc_lv<12> > ap_return_10;
    sc_out< sc_lv<12> > ap_return_11;
    sc_out< sc_lv<12> > ap_return_12;
    sc_out< sc_lv<12> > ap_return_13;
    sc_out< sc_lv<12> > ap_return_14;
    sc_out< sc_lv<12> > ap_return_15;
    sc_out< sc_lv<12> > ap_return_16;
    sc_out< sc_lv<12> > ap_return_17;
    sc_out< sc_lv<12> > ap_return_18;
    sc_out< sc_lv<12> > ap_return_19;
    sc_out< sc_lv<12> > ap_return_20;
    sc_out< sc_lv<12> > ap_return_21;
    sc_out< sc_lv<12> > ap_return_22;
    sc_out< sc_lv<12> > ap_return_23;
    sc_out< sc_lv<12> > ap_return_24;
    sc_out< sc_lv<12> > ap_return_25;


    // Module declarations
    toThreshold_Block_proc(sc_module_name name);
    SC_HAS_PROCESS(toThreshold_Block_proc);

    ~toThreshold_Block_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_20;
    sc_signal< bool > ap_sig_bdd_60;
    sc_signal< sc_lv<12> > inMat_rows_V_fu_31_p1;
    sc_signal< sc_lv<12> > inMat_cols_V_fu_35_p1;
    sc_signal< sc_lv<12> > ap_return_0_preg;
    sc_signal< sc_lv<12> > ap_return_1_preg;
    sc_signal< sc_lv<12> > ap_return_2_preg;
    sc_signal< sc_lv<12> > ap_return_3_preg;
    sc_signal< sc_lv<12> > ap_return_4_preg;
    sc_signal< sc_lv<12> > ap_return_5_preg;
    sc_signal< sc_lv<12> > ap_return_6_preg;
    sc_signal< sc_lv<12> > ap_return_7_preg;
    sc_signal< sc_lv<12> > ap_return_8_preg;
    sc_signal< sc_lv<12> > ap_return_9_preg;
    sc_signal< sc_lv<12> > ap_return_10_preg;
    sc_signal< sc_lv<12> > ap_return_11_preg;
    sc_signal< sc_lv<12> > ap_return_12_preg;
    sc_signal< sc_lv<12> > ap_return_13_preg;
    sc_signal< sc_lv<12> > ap_return_14_preg;
    sc_signal< sc_lv<12> > ap_return_15_preg;
    sc_signal< sc_lv<12> > ap_return_16_preg;
    sc_signal< sc_lv<12> > ap_return_17_preg;
    sc_signal< sc_lv<12> > ap_return_18_preg;
    sc_signal< sc_lv<12> > ap_return_19_preg;
    sc_signal< sc_lv<12> > ap_return_20_preg;
    sc_signal< sc_lv<12> > ap_return_21_preg;
    sc_signal< sc_lv<12> > ap_return_22_preg;
    sc_signal< sc_lv<12> > ap_return_23_preg;
    sc_signal< sc_lv<12> > ap_return_24_preg;
    sc_signal< sc_lv<12> > ap_return_25_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_st1_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_16();
    void thread_ap_return_17();
    void thread_ap_return_18();
    void thread_ap_return_19();
    void thread_ap_return_2();
    void thread_ap_return_20();
    void thread_ap_return_21();
    void thread_ap_return_22();
    void thread_ap_return_23();
    void thread_ap_return_24();
    void thread_ap_return_25();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_ap_sig_bdd_20();
    void thread_ap_sig_bdd_60();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_inMat_cols_V_fu_35_p1();
    void thread_inMat_rows_V_fu_31_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
